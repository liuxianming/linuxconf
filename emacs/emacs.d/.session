;;; Automatically generated on Thu Apr  2 01:39:58 2015
;;; Invoked by liuxianming@MMQQs-iMac.local using 24.3.1
(setq-default kill-ring '(#("  (setq include-dirs (append include-dirs cedet-sys-include-dirs))
" 0 2 (fontified t) 2 3 (face \.\.\. fontified t) 3 21 (fontified t) 21 22 (face \.\.\. fontified t) 22 64 (fontified t) 64 65 (face \.\.\. fontified t) 65 66 (face \.\.\. fontified t) 66 67 (fontified t)) #("
   " 0 1 (fontified t) 1 4 (fontified t)) #("(defconst cedet-user-include-dirs
  (list \"..\" \"../include\" \"../inc\" \"../common\" \"../public\"
        \"../..\" \"../../include\" \"../../inc\" \"../../common\" \"../../public\"))
" 0 1 (face \.\.\. fontified t) 1 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 33 (face font-lock-variable-name-face fontified t) 33 36 (fontified t) 36 37 (face \.\.\. fontified t) 37 42 (fontified t) 42 46 (face font-lock-string-face fontified t) 46 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 60 (fontified t) 60 68 (face font-lock-string-face fontified t) 68 69 (fontified t) 69 80 (face font-lock-string-face fontified t) 80 81 (fontified t) 81 92 (face font-lock-string-face fontified t) 92 93 (fontified t) 93 101 (fontified t) 101 108 (face font-lock-string-face fontified t) 108 109 (fontified t) 109 124 (face font-lock-string-face fontified t) 124 125 (fontified t) 125 136 (face font-lock-string-face fontified t) 136 137 (fontified t) 137 151 (face font-lock-string-face fontified t) 151 152 (fontified t) 152 166 (face font-lock-string-face fontified t) 166 167 (face \.\.\. fontified t) 167 168 (face \.\.\. fontified t) 168 169 (fontified t)) #("  136 (list \"..\" \"../include\" \"../inc\" \"../common\" \"../public\"
            \"../..\" \"../../include\" \"../../inc\" \"../../common\" \"../../public\")" 0 6 (fontified t) 6 7 (fontified t face \.\.\.) 7 12 (fontified t) 12 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t) 17 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t) 30 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t) 39 49 (fontified t face font-lock-string-face) 49 50 (fontified t face font-lock-string-face) 50 51 (fontified t) 51 61 (fontified t face font-lock-string-face) 61 62 (fontified t face font-lock-string-face) 62 63 (fontified t) 63 75 (fontified t) 75 81 (fontified t face font-lock-string-face) 81 82 (fontified t face font-lock-string-face) 82 83 (fontified t) 83 97 (fontified t face font-lock-string-face) 97 98 (fontified t face font-lock-string-face) 98 99 (fontified t) 99 109 (fontified t face font-lock-string-face) 109 110 (fontified t face font-lock-string-face) 110 111 (fontified t) 111 124 (fontified t face font-lock-string-face) 124 125 (fontified t face font-lock-string-face) 125 126 (fontified t) 126 139 (fontified t face font-lock-string-face) 139 140 (fontified t face font-lock-string-face) 140 141 (fontified t face \.\.\.)) #("(defconst user-head-file-dir   (list \".\" \"../hdr\" \"../include\") \"用户头文件目录\")" 0 1 (face \.\.\. fontified t) 1 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 28 (face font-lock-variable-name-face fontified t) 28 31 (fontified t) 31 32 (face \.\.\. fontified t) 32 37 (fontified t) 37 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (fontified t) 41 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (fontified t) 50 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face \.\.\. fontified t) 63 64 (fontified t) 64 72 (face font-lock-doc-face fontified t) 72 73 (face font-lock-doc-face fontified t) 73 74 (face \.\.\. fontified t)) #("                                        ; turn on ede mode
" 0 40 (fontified t) 40 42 (fontified t face font-lock-comment-delimiter-face) 42 58 (fontified t face font-lock-comment-face) 58 59 (fontified t)) #(";; cpplint: install using pip install cpplint, and it should be installed to /usr/local/bin/cpplint" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 77 (fontified t face font-lock-comment-face) 77 99 (fontified t face font-lock-comment-face)) "                                        ; auto-complete"))
(setq-default session-file-alist '(("~/.emacs.d/lisp/init-ccpp.el" 3062 1945 1 nil nil 3062 (overwrite-mode)) ("~/.emacs.d/elpa/google-c-style-20140929.1118/google-c-style-autoloads.el" 2387 nil 1 nil nil 2387 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-cursor-20130822.1032/flymake-cursor-autoloads.el" 1842 nil 1 nil nil 1842 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-google-cpplint-20140205.525/flymake-google-cpplint-autoloads.el" 538 nil 1 nil nil 538 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-easy-20140818.55/flymake-easy-autoloads.el" 193 nil 1 nil nil 193 (overwrite-mode)) ("~/.emacs.d/elpa/iedit-20150108.1653/iedit-autoloads.el" 2997 nil 1 nil nil 2997 (overwrite-mode)) ("~/.emacs.d/init.el" 2137 2355 1 nil nil 2137 (overwrite-mode)) ("~/.emacs.d/elpa/auto-complete-c-headers-20140325.835/auto-complete-c-headers-autoloads.el" 226 nil 1 nil nil 226 (overwrite-mode)) ("~/.emacs.d/elpa/yasnippet-20150323.311/yasnippet-autoloads.el" 1478 nil 1 nil nil 1478 (overwrite-mode)) ("~/.emacs.d/lisp/#init-ccpp.el#" 53 nil 1 nil nil 53 (overwrite-mode)) ("~/.emacs.d/elpa/color-theme-20080305.34/color-theme-autoloads.el" 5004 nil 1 nil nil 2104 (overwrite-mode)) ("/Volumes/Macintosh HD/Users/liuxianming/Working/FNN/src/caffe/layers/base_conv_layer.cpp" 10780 9432 1 nil nil 10070 (overwrite-mode)) ("/Volumes/Macintosh HD/Users/liuxianming/Working/FNN/include/caffe/vision_layers.hpp" 2960 2889 1 nil nil 3025 (overwrite-mode)) ("/Volumes/Macintosh HD/Users/liuxianming/Working/FNN/include/caffe/layer.hpp" 14221 11821 1 nil nil 11633 (overwrite-mode)) ("/Volumes/Macintosh HD/Users/liuxianming/Working/caffe_feedback/include/caffe/layer.hpp" 1584 1 1 nil nil nil (overwrite-mode)) ("~/.emacs.d/lisp/init-editing-utils.el" 3436 3356 1 nil nil 3436 (overwrite-mode)) ("~/.emacs.d/lisp/init-evil.el" 4561 16578 1 nil nil 604 (overwrite-mode)) ("~/.emacs.d/custom.el" 1 nil 1 nil nil 1681 (overwrite-mode)) ("~/Working/cs543_hw/HM3/Report/hm3.tex" 2281 2630 1 nil nil 2281 (overwrite-mode)) ("~/.emacs.d/elpa/flycheck-20150307.728/flycheck-autoloads.el" 7898 nil 1 nil nil 7898 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/init.el" "~/.emacs.d/lisp/init-ccpp.el" "~/.emacs.d/ede-projects.el" "~/.emacs.d/elpa/google-c-style-20140929.1118/google-c-style-autoloads.el" "~/.emacs.d/elpa/flymake-cursor-20130822.1032/flymake-cursor-autoloads.el" "~/.emacs.d/elpa/flymake-google-cpplint-20140205.525/flymake-google-cpplint-autoloads.el" "~/.emacs.d/elpa/flymake-easy-20140818.55/flymake-easy-autoloads.el" "/Users/liuxianming/.emacs.d/lisp/init-css.el" "/Users/liuxianming/.emacs.d/lisp/init-textile.el" "/Users/liuxianming/.emacs.d/lisp/init-ccpp.el" "~/.emacs.d/elpa/iedit-20150108.1653/iedit-autoloads.el" "~/.emacs.d/elpa/auto-complete-c-headers-20140325.835/auto-complete-c-headers-autoloads.el" "~/.emacs.d/elpa/yasnippet-20150323.311/yasnippet-autoloads.el" "~/.emacs.d/lisp/#init-ccpp.el#" "/Users/liuxianming/.emacs.d/custom.el" "/Users/liuxianming/.emacs.d/lisp/init-auto-complete.el" "/Users/liuxianming/.emacs.d/lisp/init-site-lisp.el" "/Users/liuxianming/.emacs.d/init.el" "/Users/liuxianming/.emacs.d/lisp/#init-ccpp.el#" "~/.emacs.d/elpa/color-theme-20080305.34/color-theme-autoloads.el" "~/Working/caffe_feedback/include/caffe/layer.hpp" "~/Working/FNN/include/caffe/layer.hpp" "~/Working/FNN/include/caffe/vision_layers.hpp" "/Users/liuxianming/Working/FNN/src/caffe/layers/base_conv_layer.cpp" "/Users/liuxianming/Working/FNN/include/caffe/vision_layers.hpp" "/Users/liuxianming/Working/FNN/include/caffe/layer.hpp" "/Users/liuxianming/Working/FNN/include/caffe/common_layers.hpp" "/Users/liuxianming/Working/caffe_feedback/include/caffe/layer.hpp" "~/Working/cs543_hw/HM3/Report/hm3.tex" "~/.emacs.d/lisp/init-evil.el" "~/.emacs.d/lisp/init-editing-utils.el" "/Users/liuxianming/.emacs.d/lisp/init-editing-utils.el" "~/.emacs.d/custom.el" "/Users/liuxianming/Working/cs543_hw/HM3/Report/hm3.tex" "~/.emacs.d/elpa/flycheck-20150307.728/flycheck-autoloads.el" "~/Working/caffe/python/draw_net.py" "~/Working/caffe/Makefile.config.example" "~/.emacs.d/elpa/expand-region-20141223.1328/expand-region-autoloads.el" "~/.emacs.d/elpa/archives/melpa-stable/archive-contents" "~/.emacs.d/elpa/archives/melpa/archive-contents"))
(setq-default search-ring '("google-c-s" "flymake-cu" "flymake-google" "auto-complete-clang" "iedit" "auto-complete-c" "yasnippet" "init-auto-" "ccpp" "theme" "color-theme" "init-theme" "eq_filter" "get" "undo"))
(setq-default regexp-search-ring '("undo"))
(setq-default buffer-name-history '("init-ccpp.el" "init-css.el" "init-textile.el" "init.el" "*Packages*" "*Compile-Log*" "custom.el" "init-site-lisp.el" "init-auto-complete.el" "*Warnings*" "layer.hpp" "layer.hpp • FNN" "vision_layers.hpp" "base_conv_layer.cpp" "*Diff*" "layer.hpp • caffe_feedback" "common_layers.hpp" "*scratch*" "*Messages*" "hm3.tex" "init-evil.el" "init-editing-utils.el" "*Customize Group: Emacs*"))
(setq-default evil-ex-history '(#("q" 0 1 (ex-index 1))))
(setq-default evil-search-forward-history '("undo"))
(setq-default extended-command-history '("package-list-packages" "diff" "diff-mode" "dark" "shell" "package-install" "undo-tree-visualize" "evil-ex"))
(setq-default ido-buffer-history '("init-ccpp.el" "init-css.el" "init-textile.el" "init.el" "*Packages*" "*Compile-Log*" "custom.el" "init-site-lisp.el" "init-auto-complete.el" "*Warnings*" "layer.hpp" "layer.hpp • FNN" "vision_layers.hpp" "base_conv_layer.cpp" "*Diff*" "layer.hpp • caffe_feedback" "common_layers.hpp" nil "*scratch*" "*Messages*" "hm3.tex" "init-evil.el" "init-editing-utils.el" "*Customize Group: Emacs*" "net.cpp" "undo-tree.elc" "init-uniquify.el" " *undo-tree*" "TODO"))
(setq-default ido-file-history '("init-css.el" "init-textile.el" "init-ccpp.el" "lisp/" "custom.el" "init-auto-complete.el" "init-site-lisp.el" "init.el" "#init-ccpp.el#" "base_conv_layer.cpp" "vision_layers.hpp" "layer.hpp" "common_layers.hpp" "init-editing-utils.el" "hm3.tex" "undo-tree-autoloads.el" "undo-tree.elc" "init-uniquify.el"))
(setq-default minibuffer-history '("flycheck" "undo-tree" "evil"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default smex-history '(package-list-packages diff diff-mode shell package-install cd 5x5))
(setq-default yes-or-no-p-history '("yes" "y"))
